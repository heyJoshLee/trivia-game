{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/repos/triva-game/client/src/components/AnswerBoxes.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnswerBoxes = props => {\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  const renderAnswers = () => {\n    if (!props.question) {\n      console.log(\"No question\");\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 14\n      }, this);\n    } else {\n      let choices = props.question.results[0].incorrect_answers;\n      let correct_answer = props.question.results[0].correct_answer;\n      choices.push(correct_answer);\n      console.log(choices);\n      console.log(shuffleArray(choices));\n      return props.question.results[0].incorrect_answers.map(choice => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: choice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 16\n        }, this);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderAnswers()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_c = AnswerBoxes;\n\nconst mapStateToProps = state => {\n  return {\n    question: state.question\n  };\n};\n\nexport default connect(mapStateToProps)(AnswerBoxes);\n\nvar _c;\n\n$RefreshReg$(_c, \"AnswerBoxes\");","map":{"version":3,"sources":["/Users/mymac/repos/triva-game/client/src/components/AnswerBoxes.js"],"names":["React","connect","AnswerBoxes","props","shuffleArray","array","i","length","j","Math","floor","random","renderAnswers","question","console","log","choices","results","incorrect_answers","correct_answer","push","map","choice","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAGA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAG7B,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,SAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,OAACD,KAAK,CAACC,CAAD,CAAN,EAAWD,KAAK,CAACG,CAAD,CAAhB,IAAuB,CAACH,KAAK,CAACG,CAAD,CAAN,EAAWH,KAAK,CAACC,CAAD,CAAhB,CAAvB;AACH;AACF,GALD;;AAOA,QAAMM,aAAa,GAAG,MAAM;AAC1B,QAAI,CAACT,KAAK,CAACU,QAAX,EAAqB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAHD,MAGO;AACL,UAAIC,OAAO,GAAGb,KAAK,CAACU,QAAN,CAAeI,OAAf,CAAuB,CAAvB,EAA0BC,iBAAxC;AACA,UAAIC,cAAc,GAAGhB,KAAK,CAACU,QAAN,CAAeI,OAAf,CAAuB,CAAvB,EAA0BE,cAA/C;AACAH,MAAAA,OAAO,CAACI,IAAR,CAAaD,cAAb;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYX,YAAY,CAACY,OAAD,CAAxB;AACA,aAAOb,KAAK,CAACU,QAAN,CAAeI,OAAf,CAAuB,CAAvB,EAA0BC,iBAA1B,CAA4CG,GAA5C,CAAgDC,MAAM,IAAI;AAC/D,4BAAO;AAAA,oBAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFM,CAAP;AAGD;AACF,GAdD;;AAeA,sBACE;AAAA,cACGV,aAAa;AADhB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9BD;;KAAMV,W;;AAgCN,MAAMqB,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLX,IAAAA,QAAQ,EAAEW,KAAK,CAACX;AADX,GAAP;AAGD,CAJD;;AAMA,eAAeZ,OAAO,CAACsB,eAAD,CAAP,CAAyBrB,WAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\n\nconst AnswerBoxes = (props) => {\n\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  const renderAnswers = () => {\n    if (!props.question) {\n      console.log(\"No question\")\n      return <div></div>\n    } else {\n      let choices = props.question.results[0].incorrect_answers;\n      let correct_answer = props.question.results[0].correct_answer;\n      choices.push(correct_answer);\n      console.log(choices)\n      console.log(shuffleArray(choices));\n      return props.question.results[0].incorrect_answers.map(choice => {\n        return <div>{choice}</div>\n      })\n    }\n  }\n  return (\n    <div>\n      {renderAnswers()}\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    question: state.question\n  }\n}\n\nexport default connect(mapStateToProps)(AnswerBoxes);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/repos/triva-game/client/src/components/TimeBar.js\";\nimport React from 'react';\nimport jQuery from 'jquery';\nimport { connect } from 'react-redux';\nimport { startTimer, stopTimer } from '../actions/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TimeBar = props => {\n  let width;\n\n  const reduceBar = () => {\n    let $bar = jQuery(\"#inside\");\n    width -= 1;\n\n    if (width === 70) {\n      $bar.css(\"background-color\", \"orange\");\n    } else if (width === 40) {\n      $bar.css(\"background-color\", \"red\");\n    }\n\n    let widthPercent = width + \"%\";\n    $bar.width(widthPercent);\n  };\n\n  if (props.timerRunning) {\n    let startInterval = setInterval(reduceBar, 200);\n  }\n\n  const startTimerLocal = () => {\n    width = 100;\n    props.startTimer();\n  };\n\n  const stopTimerLocal = () => {\n    clearInterval(startInterval);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"progress-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"inside\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startTimerLocal,\n      children: \"Start Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopTimerLocal,\n      children: \"Stop Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TimeBar;\n\nconst mapStateToProps = state => {\n  return {\n    timerRunning: state.timerRunning\n  };\n};\n\nexport default connect(mapStateToProps, {\n  startTimer,\n  stopTimer\n})(TimeBar);\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeBar\");","map":{"version":3,"sources":["/Users/mymac/repos/triva-game/client/src/components/TimeBar.js"],"names":["React","jQuery","connect","startTimer","stopTimer","TimeBar","props","width","reduceBar","$bar","css","widthPercent","timerRunning","startInterval","setInterval","startTimerLocal","stopTimerLocal","clearInterval","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;;;AAGA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEzB,MAAIC,KAAJ;;AACA,QAAMC,SAAS,GAAG,MAAM;AACtB,QAAIC,IAAI,GAAGR,MAAM,CAAC,SAAD,CAAjB;AACAM,IAAAA,KAAK,IAAI,CAAT;;AACA,QAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBE,MAAAA,IAAI,CAACC,GAAL,CAAS,kBAAT,EAA6B,QAA7B;AACD,KAFD,MAEO,IAAIH,KAAK,KAAK,EAAd,EAAkB;AACvBE,MAAAA,IAAI,CAACC,GAAL,CAAS,kBAAT,EAA6B,KAA7B;AACD;;AACD,QAAIC,YAAY,GAAGJ,KAAK,GAAG,GAA3B;AACAE,IAAAA,IAAI,CAACF,KAAL,CAAWI,YAAX;AACD,GAVD;;AAYA,MAAIL,KAAK,CAACM,YAAV,EAAwB;AACtB,QAAIC,aAAa,GAAGC,WAAW,CAACN,SAAD,EAAY,GAAZ,CAA/B;AACD;;AAED,QAAMO,eAAe,GAAG,MAAM;AAC5BR,IAAAA,KAAK,GAAG,GAAR;AACAD,IAAAA,KAAK,CAACH,UAAN;AACD,GAHD;;AAKA,QAAMa,cAAc,GAAG,MAAM;AAC3BC,IAAAA,aAAa,CAACJ,aAAD,CAAb;AACD,GAFD;;AAKA,sBACE;AAAK,IAAA,EAAE,EAAC,cAAR;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEE,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAEC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApCD;;KAAMX,O;;AAsCN,MAAMa,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLP,IAAAA,YAAY,EAAEO,KAAK,CAACP;AADf,GAAP;AAGD,CAJD;;AAMA,eAAeV,OAAO,CAACgB,eAAD,EAAkB;AACtCf,EAAAA,UADsC;AAEtCC,EAAAA;AAFsC,CAAlB,CAAP,CAGZC,OAHY,CAAf","sourcesContent":["import React from 'react';\nimport jQuery from 'jquery';\nimport { connect } from 'react-redux';\nimport { startTimer, stopTimer } from '../actions/index'\n\n\nconst TimeBar = (props) => {\n    \n  let width;\n  const reduceBar = () => {\n    let $bar = jQuery(\"#inside\");\n    width -= 1;\n    if (width === 70) {\n      $bar.css(\"background-color\", \"orange\")\n    } else if (width === 40) {\n      $bar.css(\"background-color\", \"red\")\n    } \n    let widthPercent = width + \"%\";\n    $bar.width(widthPercent);\n  }\n\n  if (props.timerRunning) {\n    let startInterval = setInterval(reduceBar, 200)\n  }\n\n  const startTimerLocal = () => {\n    width = 100;\n    props.startTimer();\n  }\n\n  const stopTimerLocal = () => {\n    clearInterval(startInterval);\n  }\n\n\n  return (\n    <div id=\"progress-bar\">\n      <div id=\"inside\"></div> \n      <button onClick={startTimerLocal}>Start Timer</button>\n      <button onClick={stopTimerLocal}>Stop Timer</button>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    timerRunning: state.timerRunning\n  }\n}\n\nexport default connect(mapStateToProps, {\n  startTimer,\n  stopTimer\n})(TimeBar);"]},"metadata":{},"sourceType":"module"}